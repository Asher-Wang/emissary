/**
 * Host defines a way that an Ambassador will be visible to the 
 * outside world. A minimal Host defines a hostname (of course) by
 * which the Ambassador will be reachable, but a Host can also
 * tell an Ambassador how to manage TLS, and which resources to 
 * examine for further configuration.
 */
syntax = "proto3";

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/api/core/v1/generated.proto";

message Host {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Specification of the desired behavior of the Host.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  HostSpec spec = 2;

  // Most recently observed status of the Host.
  // This data may not be up to date.
  // Populated by AES.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  HostStatus status = 3;
}

// The Host resource will usually be a Kubernetes CRD, but it could
// appear in other forms. The HostSpec is the part of the Host resource
// that doesn't change, no matter what form it's in -- when it's a CRD,
// this is the part in the "spec" dictionary.
message HostSpec {
  // Common to all Ambassador objects (and optional).
  repeated string ambassador_id = 1;

  // Common to all Ambassador objects (and optional).
  int32 generation = 2;

  // Hostname by which the Ambassador can be reached.
  string hostname = 3;

  // Selector by which we can find further configuration. Defaults to hostname=$hostname
  k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector selector = 4;

  // Specifies who to talk ACME with to get certs. Defaults to Let's Encrypt; if "none", do
  // not try to do TLS for this Host.
  ACMEProviderSpec acmeProvider = 5;

  // Name of the Kubernetes secret into which to save generated certificates. Defaults
  // to $hostname
  k8s.io.api.core.v1.LocalObjectReference tlsSecret = 6;
}

enum HostTLSCertificateSource {
  Unknown = 0;
  None    = 1;
  Other   = 2;
  ACME    = 3;
}

enum HostState {
  Pending = 0;
  Ready   = 1;
  Error   = 2;
}

enum HostPhase {
  NA                        = 0;
  DefaultsFilled            = 1;
  ACMEUserPrivateKeyCreated = 2;
  ACMEUserRegistered        = 3;
  ACMECertificateChallenge  = 4;
}

message HostStatus {
  HostTLSCertificateSource tlsCertificateSource = 1;

  HostState state = 2;

  // phaseCompleted and phasePending are valid when state==Pending or
  // state==Error.
  HostPhase phaseCompleted = 3;
  HostPhase phasePending = 4;

  // reason is valid when state==Error
  string reason = 5;
}

message ACMEProviderSpec {
  // Specifies who to talk ACME with to get certs. Defaults to Let's
  // Encrypt; if "none", do not try to do TLS for this Host.
  string authority = 1;

  string email = 2;

  k8s.io.api.core.v1.LocalObjectReference privateKeySecret = 3;

  // This is normally set automatically
  string registration = 4;
}
