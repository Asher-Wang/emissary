// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: getambassador.io/v2/Host.proto

package Host

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	v11 "k8s.io/api/core/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type HostTLSCertificateSource int32

const (
	HostTLSCertificateSource_Unknown HostTLSCertificateSource = 0
	HostTLSCertificateSource_None    HostTLSCertificateSource = 1
	HostTLSCertificateSource_Other   HostTLSCertificateSource = 2
	HostTLSCertificateSource_ACME    HostTLSCertificateSource = 3
)

var HostTLSCertificateSource_name = map[int32]string{
	0: "Unknown",
	1: "None",
	2: "Other",
	3: "ACME",
}

var HostTLSCertificateSource_value = map[string]int32{
	"Unknown": 0,
	"None":    1,
	"Other":   2,
	"ACME":    3,
}

func (x HostTLSCertificateSource) String() string {
	return proto.EnumName(HostTLSCertificateSource_name, int32(x))
}

func (HostTLSCertificateSource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_689b3ac2a9b9e947, []int{0}
}

type HostState int32

const (
	HostState_Pending HostState = 0
	HostState_Ready   HostState = 1
	HostState_Error   HostState = 2
)

var HostState_name = map[int32]string{
	0: "Pending",
	1: "Ready",
	2: "Error",
}

var HostState_value = map[string]int32{
	"Pending": 0,
	"Ready":   1,
	"Error":   2,
}

func (x HostState) String() string {
	return proto.EnumName(HostState_name, int32(x))
}

func (HostState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_689b3ac2a9b9e947, []int{1}
}

type HostPhase int32

const (
	HostPhase_NA                        HostPhase = 0
	HostPhase_DefaultsFilled            HostPhase = 1
	HostPhase_ACMEUserPrivateKeyCreated HostPhase = 2
	HostPhase_ACMEUserRegistered        HostPhase = 3
	HostPhase_ACMECertificateChallenge  HostPhase = 4
)

var HostPhase_name = map[int32]string{
	0: "NA",
	1: "DefaultsFilled",
	2: "ACMEUserPrivateKeyCreated",
	3: "ACMEUserRegistered",
	4: "ACMECertificateChallenge",
}

var HostPhase_value = map[string]int32{
	"NA":                        0,
	"DefaultsFilled":            1,
	"ACMEUserPrivateKeyCreated": 2,
	"ACMEUserRegistered":        3,
	"ACMECertificateChallenge":  4,
}

func (x HostPhase) String() string {
	return proto.EnumName(HostPhase_name, int32(x))
}

func (HostPhase) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_689b3ac2a9b9e947, []int{2}
}

type Host struct {
	// Standard object's metadata.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *v1.ObjectMeta `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Specification of the desired behavior of the Host.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *HostSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// Most recently observed status of the Host.
	// This data may not be up to date.
	// Populated by AES.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status               *HostStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Host) Reset()         { *m = Host{} }
func (m *Host) String() string { return proto.CompactTextString(m) }
func (*Host) ProtoMessage()    {}
func (*Host) Descriptor() ([]byte, []int) {
	return fileDescriptor_689b3ac2a9b9e947, []int{0}
}
func (m *Host) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Host) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Host.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Host) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Host.Merge(m, src)
}
func (m *Host) XXX_Size() int {
	return m.Size()
}
func (m *Host) XXX_DiscardUnknown() {
	xxx_messageInfo_Host.DiscardUnknown(m)
}

var xxx_messageInfo_Host proto.InternalMessageInfo

func (m *Host) GetMetadata() *v1.ObjectMeta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Host) GetSpec() *HostSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Host) GetStatus() *HostStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// The Host resource will usually be a Kubernetes CRD, but it could
// appear in other forms. The HostSpec is the part of the Host resource
// that doesn't change, no matter what form it's in -- when it's a CRD,
// this is the part in the "spec" dictionary.
type HostSpec struct {
	// Common to all Ambassador objects (and optional).
	AmbassadorId []string `protobuf:"bytes,1,rep,name=ambassador_id,json=ambassadorId,proto3" json:"ambassador_id,omitempty"`
	// Common to all Ambassador objects (and optional).
	Generation int32 `protobuf:"varint,2,opt,name=generation,proto3" json:"generation,omitempty"`
	// Hostname by which the Ambassador can be reached.
	Hostname string `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// Selector by which we can find further configuration. Defaults to hostname=$hostname
	Selector *v1.LabelSelector `protobuf:"bytes,4,opt,name=selector,proto3" json:"selector,omitempty"`
	// Specifies who to talk ACME with to get certs. Defaults to Let's Encrypt; if "none", do
	// not try to do TLS for this Host.
	AcmeProvider *ACMEProviderSpec `protobuf:"bytes,5,opt,name=acmeProvider,proto3" json:"acmeProvider,omitempty"`
	// Name of the Kubernetes secret into which to save generated certificates. Defaults
	// to $hostname
	TlsSecret            *v11.LocalObjectReference `protobuf:"bytes,6,opt,name=tlsSecret,proto3" json:"tlsSecret,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *HostSpec) Reset()         { *m = HostSpec{} }
func (m *HostSpec) String() string { return proto.CompactTextString(m) }
func (*HostSpec) ProtoMessage()    {}
func (*HostSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_689b3ac2a9b9e947, []int{1}
}
func (m *HostSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HostSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HostSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostSpec.Merge(m, src)
}
func (m *HostSpec) XXX_Size() int {
	return m.Size()
}
func (m *HostSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_HostSpec.DiscardUnknown(m)
}

var xxx_messageInfo_HostSpec proto.InternalMessageInfo

func (m *HostSpec) GetAmbassadorId() []string {
	if m != nil {
		return m.AmbassadorId
	}
	return nil
}

func (m *HostSpec) GetGeneration() int32 {
	if m != nil {
		return m.Generation
	}
	return 0
}

func (m *HostSpec) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *HostSpec) GetSelector() *v1.LabelSelector {
	if m != nil {
		return m.Selector
	}
	return nil
}

func (m *HostSpec) GetAcmeProvider() *ACMEProviderSpec {
	if m != nil {
		return m.AcmeProvider
	}
	return nil
}

func (m *HostSpec) GetTlsSecret() *v11.LocalObjectReference {
	if m != nil {
		return m.TlsSecret
	}
	return nil
}

type HostStatus struct {
	TlsCertificateSource HostTLSCertificateSource `protobuf:"varint,1,opt,name=tlsCertificateSource,proto3,enum=HostTLSCertificateSource" json:"tlsCertificateSource,omitempty"`
	State                HostState                `protobuf:"varint,2,opt,name=state,proto3,enum=HostState" json:"state,omitempty"`
	// phaseCompleted and phasePending are valid when state==Pending or
	// state==Error.
	PhaseCompleted HostPhase `protobuf:"varint,3,opt,name=phaseCompleted,proto3,enum=HostPhase" json:"phaseCompleted,omitempty"`
	PhasePending   HostPhase `protobuf:"varint,4,opt,name=phasePending,proto3,enum=HostPhase" json:"phasePending,omitempty"`
	// reason is valid when state==Error
	Reason               string   `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HostStatus) Reset()         { *m = HostStatus{} }
func (m *HostStatus) String() string { return proto.CompactTextString(m) }
func (*HostStatus) ProtoMessage()    {}
func (*HostStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_689b3ac2a9b9e947, []int{2}
}
func (m *HostStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HostStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HostStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostStatus.Merge(m, src)
}
func (m *HostStatus) XXX_Size() int {
	return m.Size()
}
func (m *HostStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_HostStatus.DiscardUnknown(m)
}

var xxx_messageInfo_HostStatus proto.InternalMessageInfo

func (m *HostStatus) GetTlsCertificateSource() HostTLSCertificateSource {
	if m != nil {
		return m.TlsCertificateSource
	}
	return HostTLSCertificateSource_Unknown
}

func (m *HostStatus) GetState() HostState {
	if m != nil {
		return m.State
	}
	return HostState_Pending
}

func (m *HostStatus) GetPhaseCompleted() HostPhase {
	if m != nil {
		return m.PhaseCompleted
	}
	return HostPhase_NA
}

func (m *HostStatus) GetPhasePending() HostPhase {
	if m != nil {
		return m.PhasePending
	}
	return HostPhase_NA
}

func (m *HostStatus) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type ACMEProviderSpec struct {
	// Specifies who to talk ACME with to get certs. Defaults to Let's
	// Encrypt; if "none", do not try to do TLS for this Host.
	Authority        string                    `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Email            string                    `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	PrivateKeySecret *v11.LocalObjectReference `protobuf:"bytes,3,opt,name=privateKeySecret,proto3" json:"privateKeySecret,omitempty"`
	// This is normally set automatically
	Registration         string   `protobuf:"bytes,4,opt,name=registration,proto3" json:"registration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ACMEProviderSpec) Reset()         { *m = ACMEProviderSpec{} }
func (m *ACMEProviderSpec) String() string { return proto.CompactTextString(m) }
func (*ACMEProviderSpec) ProtoMessage()    {}
func (*ACMEProviderSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_689b3ac2a9b9e947, []int{3}
}
func (m *ACMEProviderSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACMEProviderSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACMEProviderSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ACMEProviderSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACMEProviderSpec.Merge(m, src)
}
func (m *ACMEProviderSpec) XXX_Size() int {
	return m.Size()
}
func (m *ACMEProviderSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ACMEProviderSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ACMEProviderSpec proto.InternalMessageInfo

func (m *ACMEProviderSpec) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *ACMEProviderSpec) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *ACMEProviderSpec) GetPrivateKeySecret() *v11.LocalObjectReference {
	if m != nil {
		return m.PrivateKeySecret
	}
	return nil
}

func (m *ACMEProviderSpec) GetRegistration() string {
	if m != nil {
		return m.Registration
	}
	return ""
}

func init() {
	proto.RegisterEnum("HostTLSCertificateSource", HostTLSCertificateSource_name, HostTLSCertificateSource_value)
	proto.RegisterEnum("HostState", HostState_name, HostState_value)
	proto.RegisterEnum("HostPhase", HostPhase_name, HostPhase_value)
	proto.RegisterType((*Host)(nil), "Host")
	proto.RegisterType((*HostSpec)(nil), "HostSpec")
	proto.RegisterType((*HostStatus)(nil), "HostStatus")
	proto.RegisterType((*ACMEProviderSpec)(nil), "ACMEProviderSpec")
}

func init() { proto.RegisterFile("getambassador.io/v2/Host.proto", fileDescriptor_689b3ac2a9b9e947) }

var fileDescriptor_689b3ac2a9b9e947 = []byte{
	// 687 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4d, 0x4f, 0xdb, 0x4a,
	0x14, 0xc5, 0xf9, 0x7a, 0xf1, 0x25, 0x2f, 0xf2, 0x1b, 0x21, 0x64, 0x10, 0x44, 0x28, 0x6c, 0x10,
	0x0b, 0xe7, 0x11, 0xde, 0x93, 0xba, 0xa5, 0x29, 0xa8, 0x55, 0xf9, 0x88, 0x26, 0xb0, 0xae, 0x26,
	0xf6, 0x25, 0x99, 0xc6, 0xf1, 0x58, 0x33, 0x93, 0x54, 0x91, 0xfa, 0x43, 0xfa, 0x5f, 0xba, 0xe9,
	0xb2, 0xcb, 0xfe, 0x84, 0x8a, 0x7f, 0xd1, 0x5d, 0x35, 0x63, 0xe7, 0x0b, 0xa8, 0xd4, 0x2e, 0xe7,
	0xdc, 0x73, 0xee, 0xcd, 0x39, 0x27, 0x32, 0x34, 0x06, 0xa8, 0xd9, 0xb8, 0xcf, 0x94, 0x62, 0x91,
	0x90, 0x01, 0x17, 0xad, 0x69, 0xbb, 0xf5, 0x5a, 0x28, 0x1d, 0xa4, 0x52, 0x68, 0xb1, 0xfb, 0xdf,
	0xe8, 0x85, 0x32, 0x28, 0x4b, 0xf9, 0x98, 0x85, 0x43, 0x9e, 0xa0, 0x9c, 0xb5, 0xd2, 0xd1, 0xc0,
	0x00, 0xaa, 0x35, 0x46, 0xcd, 0x5a, 0xd3, 0x93, 0xd6, 0x00, 0x13, 0x94, 0x4c, 0x63, 0x94, 0xab,
	0x9a, 0x4b, 0x55, 0x2b, 0x14, 0x12, 0x9f, 0xe1, 0x34, 0x3f, 0x39, 0x50, 0x32, 0x87, 0xc8, 0x25,
	0x54, 0xcd, 0x9e, 0x88, 0x69, 0xe6, 0x3b, 0x07, 0xce, 0xd1, 0x66, 0xfb, 0xdf, 0x20, 0xd3, 0x07,
	0xab, 0x57, 0x83, 0x74, 0x34, 0x30, 0x80, 0x0a, 0x0c, 0x3b, 0x98, 0x9e, 0x04, 0x37, 0xfd, 0xf7,
	0x18, 0xea, 0x2b, 0xd4, 0x8c, 0x2e, 0x36, 0x90, 0x7d, 0x28, 0xa9, 0x14, 0x43, 0xbf, 0x60, 0x37,
	0xb9, 0x81, 0x39, 0xd1, 0x4b, 0x31, 0xa4, 0x16, 0x26, 0x87, 0x50, 0x51, 0x9a, 0xe9, 0x89, 0xf2,
	0x8b, 0x96, 0xb0, 0x99, 0x11, 0x2c, 0x44, 0xf3, 0x51, 0xf3, 0x73, 0x01, 0xaa, 0x73, 0x1d, 0x39,
	0x84, 0xbf, 0x97, 0x01, 0xbd, 0xe3, 0x91, 0xef, 0x1c, 0x14, 0x8f, 0x5c, 0x5a, 0x5b, 0x82, 0x6f,
	0x22, 0xd2, 0x00, 0xc8, 0xfd, 0x71, 0x91, 0xd8, 0xdb, 0x65, 0xba, 0x82, 0x90, 0x5d, 0xa8, 0x0e,
	0x85, 0xd2, 0x09, 0x1b, 0xa3, 0x3d, 0xec, 0xd2, 0xc5, 0x9b, 0xdc, 0x40, 0x55, 0x61, 0x8c, 0xa1,
	0x16, 0xd2, 0x2f, 0xd9, 0x1f, 0x75, 0xfa, 0x7b, 0xfe, 0x2f, 0x59, 0x1f, 0xe3, 0x5e, 0x2e, 0xa5,
	0x8b, 0x25, 0xe4, 0x7f, 0xa8, 0xb1, 0x70, 0x8c, 0x5d, 0x29, 0xa6, 0x3c, 0x42, 0xe9, 0x97, 0xed,
	0xd2, 0x7f, 0x82, 0xb3, 0xce, 0xd5, 0xf9, 0x1c, 0xb4, 0x91, 0xac, 0xd1, 0xc8, 0x05, 0xb8, 0x3a,
	0x56, 0x3d, 0x0c, 0x25, 0x6a, 0xbf, 0x62, 0x35, 0x47, 0x2b, 0x3f, 0x24, 0x30, 0x45, 0xda, 0xb3,
	0x22, 0x64, 0x71, 0x96, 0x3d, 0xc5, 0x7b, 0x94, 0x98, 0x84, 0x48, 0x97, 0xd2, 0xe6, 0x0f, 0x07,
	0x60, 0x19, 0x2a, 0xb9, 0x82, 0x2d, 0x1d, 0xab, 0x0e, 0x4a, 0xcd, 0xef, 0x79, 0xc8, 0x34, 0xf6,
	0xc4, 0x44, 0x86, 0x68, 0xab, 0xae, 0xb7, 0x77, 0x6c, 0xfe, 0xb7, 0x97, 0xbd, 0x27, 0x04, 0xfa,
	0xac, 0x8c, 0x1c, 0x40, 0xd9, 0xb4, 0x84, 0x36, 0xe4, 0x7a, 0x1b, 0x16, 0xfd, 0x21, 0xcd, 0x06,
	0xa4, 0x0d, 0xf5, 0x74, 0xc8, 0x14, 0x76, 0xc4, 0x38, 0x8d, 0x51, 0x63, 0x64, 0x13, 0x9f, 0x53,
	0xbb, 0x66, 0x44, 0x1f, 0x31, 0x48, 0x00, 0x35, 0x8b, 0x74, 0x31, 0x89, 0x78, 0x32, 0xb0, 0x3d,
	0xac, 0x2b, 0xd6, 0xe6, 0x64, 0x1b, 0x2a, 0x12, 0x99, 0x12, 0x89, 0x0d, 0xd7, 0xa5, 0xf9, 0xab,
	0xf9, 0xc5, 0x01, 0xef, 0x71, 0xcc, 0x64, 0x0f, 0x5c, 0x36, 0xd1, 0x43, 0x21, 0xb9, 0x9e, 0x59,
	0xdb, 0x2e, 0x5d, 0x02, 0x64, 0x0b, 0xca, 0x38, 0x66, 0x3c, 0xb6, 0x86, 0x5c, 0x9a, 0x3d, 0xc8,
	0x2d, 0x78, 0xa9, 0xe4, 0x53, 0xa6, 0xf1, 0x2d, 0xce, 0xf2, 0x4e, 0x8a, 0x7f, 0xd8, 0xc9, 0x93,
	0x0d, 0xa4, 0x09, 0x35, 0x89, 0x03, 0xae, 0x74, 0xfe, 0x47, 0x2d, 0xd9, 0x93, 0x6b, 0xd8, 0xf1,
	0x05, 0xf8, 0xbf, 0xaa, 0x84, 0x6c, 0xc2, 0x5f, 0x77, 0xc9, 0x28, 0x11, 0x1f, 0x12, 0x6f, 0x83,
	0x54, 0xa1, 0x74, 0x2d, 0x12, 0xf4, 0x1c, 0xe2, 0x42, 0xf9, 0x46, 0x0f, 0x51, 0x7a, 0x05, 0x03,
	0x1a, 0xff, 0x5e, 0xf1, 0x38, 0x00, 0x77, 0x51, 0x8d, 0x11, 0xe6, 0xd1, 0x79, 0x1b, 0x86, 0x4e,
	0x91, 0x45, 0xb3, 0x4c, 0x79, 0x2e, 0xa5, 0x90, 0x5e, 0xe1, 0xf8, 0x63, 0xc6, 0xb7, 0x69, 0x93,
	0x0a, 0x14, 0xae, 0xcf, 0xbc, 0x0d, 0x42, 0xa0, 0xfe, 0x0a, 0xef, 0xd9, 0x24, 0xd6, 0xea, 0x82,
	0xc7, 0x31, 0x46, 0x9e, 0x43, 0xf6, 0x61, 0xc7, 0x9c, 0xb8, 0x53, 0x28, 0xbb, 0x0b, 0x83, 0x1d,
	0x89, 0xe6, 0xdb, 0xe2, 0x15, 0xc8, 0x36, 0x90, 0xf9, 0x98, 0x5a, 0x5f, 0x28, 0x31, 0xf2, 0x8a,
	0x64, 0x0f, 0x7c, 0x83, 0xaf, 0x98, 0xea, 0x0c, 0x59, 0x1c, 0x63, 0x32, 0x40, 0xaf, 0xf4, 0xb2,
	0xf6, 0xf5, 0xa1, 0xe1, 0x7c, 0x7b, 0x68, 0x38, 0xdf, 0x1f, 0x1a, 0x4e, 0xbf, 0x62, 0x3f, 0x51,
	0xa7, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xb9, 0x5a, 0x6b, 0xab, 0x1e, 0x05, 0x00, 0x00,
}

func (m *Host) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Host) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Host) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHost(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHost(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHost(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HostSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TlsSecret != nil {
		{
			size, err := m.TlsSecret.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHost(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.AcmeProvider != nil {
		{
			size, err := m.AcmeProvider.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHost(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Selector != nil {
		{
			size, err := m.Selector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHost(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Hostname) > 0 {
		i -= len(m.Hostname)
		copy(dAtA[i:], m.Hostname)
		i = encodeVarintHost(dAtA, i, uint64(len(m.Hostname)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Generation != 0 {
		i = encodeVarintHost(dAtA, i, uint64(m.Generation))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AmbassadorId) > 0 {
		for iNdEx := len(m.AmbassadorId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AmbassadorId[iNdEx])
			copy(dAtA[i:], m.AmbassadorId[iNdEx])
			i = encodeVarintHost(dAtA, i, uint64(len(m.AmbassadorId[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *HostStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintHost(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x2a
	}
	if m.PhasePending != 0 {
		i = encodeVarintHost(dAtA, i, uint64(m.PhasePending))
		i--
		dAtA[i] = 0x20
	}
	if m.PhaseCompleted != 0 {
		i = encodeVarintHost(dAtA, i, uint64(m.PhaseCompleted))
		i--
		dAtA[i] = 0x18
	}
	if m.State != 0 {
		i = encodeVarintHost(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if m.TlsCertificateSource != 0 {
		i = encodeVarintHost(dAtA, i, uint64(m.TlsCertificateSource))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ACMEProviderSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACMEProviderSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ACMEProviderSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Registration) > 0 {
		i -= len(m.Registration)
		copy(dAtA[i:], m.Registration)
		i = encodeVarintHost(dAtA, i, uint64(len(m.Registration)))
		i--
		dAtA[i] = 0x22
	}
	if m.PrivateKeySecret != nil {
		{
			size, err := m.PrivateKeySecret.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHost(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintHost(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintHost(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintHost(dAtA []byte, offset int, v uint64) int {
	offset -= sovHost(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Host) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovHost(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovHost(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovHost(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HostSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AmbassadorId) > 0 {
		for _, s := range m.AmbassadorId {
			l = len(s)
			n += 1 + l + sovHost(uint64(l))
		}
	}
	if m.Generation != 0 {
		n += 1 + sovHost(uint64(m.Generation))
	}
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovHost(uint64(l))
	}
	if m.Selector != nil {
		l = m.Selector.Size()
		n += 1 + l + sovHost(uint64(l))
	}
	if m.AcmeProvider != nil {
		l = m.AcmeProvider.Size()
		n += 1 + l + sovHost(uint64(l))
	}
	if m.TlsSecret != nil {
		l = m.TlsSecret.Size()
		n += 1 + l + sovHost(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HostStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TlsCertificateSource != 0 {
		n += 1 + sovHost(uint64(m.TlsCertificateSource))
	}
	if m.State != 0 {
		n += 1 + sovHost(uint64(m.State))
	}
	if m.PhaseCompleted != 0 {
		n += 1 + sovHost(uint64(m.PhaseCompleted))
	}
	if m.PhasePending != 0 {
		n += 1 + sovHost(uint64(m.PhasePending))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovHost(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ACMEProviderSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovHost(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovHost(uint64(l))
	}
	if m.PrivateKeySecret != nil {
		l = m.PrivateKeySecret.Size()
		n += 1 + l + sovHost(uint64(l))
	}
	l = len(m.Registration)
	if l > 0 {
		n += 1 + l + sovHost(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovHost(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHost(x uint64) (n int) {
	return sovHost(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Host) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Host: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Host: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHost
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &v1.ObjectMeta{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHost
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &HostSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHost
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &HostStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHost
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmbassadorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHost
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmbassadorId = append(m.AmbassadorId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Generation", wireType)
			}
			m.Generation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Generation |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHost
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHost
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Selector == nil {
				m.Selector = &v1.LabelSelector{}
			}
			if err := m.Selector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcmeProvider", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHost
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AcmeProvider == nil {
				m.AcmeProvider = &ACMEProviderSpec{}
			}
			if err := m.AcmeProvider.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsSecret", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHost
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TlsSecret == nil {
				m.TlsSecret = &v11.LocalObjectReference{}
			}
			if err := m.TlsSecret.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHost
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsCertificateSource", wireType)
			}
			m.TlsCertificateSource = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TlsCertificateSource |= HostTLSCertificateSource(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= HostState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhaseCompleted", wireType)
			}
			m.PhaseCompleted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PhaseCompleted |= HostPhase(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhasePending", wireType)
			}
			m.PhasePending = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PhasePending |= HostPhase(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHost
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHost
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACMEProviderSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHost
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACMEProviderSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACMEProviderSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHost
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHost
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateKeySecret", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHost
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrivateKeySecret == nil {
				m.PrivateKeySecret = &v11.LocalObjectReference{}
			}
			if err := m.PrivateKeySecret.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Registration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHost
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHost
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHost
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Registration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHost(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHost
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHost
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHost(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHost
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHost
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHost
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHost
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthHost
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowHost
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipHost(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthHost
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthHost = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHost   = fmt.Errorf("proto: integer overflow")
)
