# Generated by `./generate`. DO NOT EDIT.

version: 2.1
# Secure environment variables set from the Web UI:
# - NETLIFY_AUTH_TOKEN (Netlify)
# - GH_TOKEN (GitHub)
_anchors:
  "website-job": &website-job
    machine:
      # If you bump this, be sure to bump "install-python.executor-key"
      # in the "website-setup" command below.
      image: "ubuntu-1604:201903-01"
    working_directory: ~/project/ambassador
  oss-linux-job:
    machine:
      image: "ubuntu-1604:201903-01"
    working_directory: ~/project/ambassador
commands:
  "website-setup":
    steps:
    - install-node:
        version: "11"
    - install-python:
        executor-key: "201903-01"
        version: "3.7.0"
    - run:
        name: "Show environment"
        command: |
          env | grep -e GIT -e TRAVIS -e CIRCLE | sort
    - oss-checkout
    - skip-if-no-changes:
        to: docs/
  oss-linux-setup:
    steps:
    - pip-install:
        packages: awscli
    - install-go
    - install-kubectl
    - install-python:
        executor-key: "201903-01"
    - oss-checkout
  oss-images-build-and-test:
    steps:
    - run:
        name: "Ensure CI configuration is up-to-date"
        command: |
          set -x
          test_targets=$(make -n noop --print-data-base 2>/dev/null | sed -n 's/^test: *//p' | xargs printf '%s\n' | LC_COLLATE=C sort -u | xargs echo)
          if [ "$test_targets" != "gotest ingresstest pytest" ]; then
            echo "Makefile 'test' target has changed to $test_targets, you need to update '.circleci/config.yml.d/oss.yml'" >&2
            exit 1
          fi

          (cd .circleci && ./generate --always-make)
          if test -n "$(git status --porcelain)"; then
            echo "The file '.circleci/config.yml' is out of date." >&2
            echo "Run '(cd .circleci && ./generate)' to update it." >&2
            exit 1
          fi
    - run:
        name: "Set up cluster and registry"
        command: |
          ./.ci/kubernaut-claim
          echo >>"$BASH_ENV" 'if test -e ~/kubernaut-claim.txt; then'
          echo >>"$BASH_ENV" '  export DEV_KUBECONFIG=~/.kube/$(cat ~/kubernaut-claim.txt).yaml'
          echo >>"$BASH_ENV" 'fi'

          if [[ -n "$DEV_REGISTRY" && -n "$DOCKER_BUILD_USERNAME" && -n "DOCKER_BUILD_PASSWORD" ]]; then
            docker login -u="${DOCKER_BUILD_USERNAME}" -p="${DOCKER_BUILD_PASSWORD}" "${DEV_REGISTRY%%/*}"
          else
            echo >>"$BASH_ENV" 'if test -e ~/kubernaut-claim.txt; then'
            echo >>"$BASH_ENV" '  KUBECONFIG=$DEV_KUBECONFIG go run ./cmd/k8sregistryctl up --storage=hostPath'
            echo >>"$BASH_ENV" '  export DEV_REGISTRY=127.0.0.1:31000'
            echo >>"$BASH_ENV" 'fi'
          fi
          echo >>"$BASH_ENV" unset BASH_ENV
    - run:
        name: "Build"
        command: |
          make push
    - run:
        name: "Go Tests"
        command: |
          make gotest
    - run:
        name: "KAT"
        command: |
          export DEV_KUBE110=yes
          export DEV_KUBE_NO_PVC=yes
          export KAT_REQ_LIMIT=600
          make pytest-only
    - run:
        command: "./.ci/kubernaut-unclaim"
        when: "always"
    - dirty-check
    #- oss-save-logs
  pip-install:
    parameters:
      packages:
        type: string
    steps:
    - run: sudo pip install << parameters.packages >>
  install-node:
    parameters:
      version:
        type: string
        default: "10"
    steps:
    - run:
        name: "Install Node << parameters.version >>"
        command: |
          echo 'export NVM_DIR=/opt/circleci/.nvm' >> ${BASH_ENV}
          echo 'source $NVM_DIR/nvm.sh' >> ${BASH_ENV}

          export NVM_DIR=/opt/circleci/.nvm
          source $NVM_DIR/nvm.sh
          if ! nvm ls << parameters.version >> > /dev/null; then nvm install << parameters.version >>; fi
          nvm alias default << parameters.version >>
  install-go:
    parameters:
      version:
        type: string
        default: "1.13"
    steps:
    - run:
        name: "Install Go << parameters.version >>"
        command: |
          set -x
          if [[ $OS == Windows_NT ]]; then
            curl https://dl.google.com/go/go<< parameters.version >>.windows-amd64.zip -o /tmp/go.zip
            mv /c/go /c/go-112
            unzip -q /tmp/go.zip -d /c/
          else
            curl https://dl.google.com/go/go<< parameters.version >>.$(uname -s | tr A-Z a-z)-amd64.tar.gz -o /tmp/go.tar.gz
            tar -C /tmp -xzf /tmp/go.tar.gz
            echo 'export PATH=/tmp/go/bin:$PATH' >> "$BASH_ENV"
            if [ -z "$(/tmp/go/bin/go env GOPROXY)" ]; then
              echo 'export GOPROXY=https://proxy.golang.org' >> "$BASH_ENV"
            fi
            . "$BASH_ENV"
          fi
          go version
  install-kubectl:
    parameters:
      version:
        type: string
        default: "1.14.0"
    steps:
    - run:
        name: "Install kubectl << parameters.version >>"
        command: |
          curl -L --fail -o /tmp/kubectl https://storage.googleapis.com/kubernetes-release/release/v<< parameters.version >>/bin/$(uname -s | tr A-Z a-z)/amd64/kubectl
          sudo install /tmp/kubectl /usr/local/bin/kubectl
  install-python:
    parameters:
      version:
        type: string
        default: "3.6.3"
      executor-key:
        type: string
    steps:
    - restore_cache:
        name: "Restore Python install cache"
        key: "pyenv-<< parameters.executor-key >>-<< parameters.version >>"
    - run:
        name: "Install Python << parameters.version >>"
        command: |
          pyenv versions
          pyenv install --skip-existing << parameters.version >>
          pyenv global 2.7.12 << parameters.version >>
          pyenv versions
    - save_cache:
        name: "Save Python install cache"
        key: "pyenv-<< parameters.executor-key >>-<< parameters.version >>"
        paths:
        - "/opt/circleci/.pyenv"
  oss-checkout:
    steps:
    - when:
        condition:
          equal:
          - "https://github.com/datawire/ambassador"
          - << pipeline.project.git_url >>
        steps:
        - checkout:
            path: ~/project/ambassador
    - when:
        condition:
          equal:
          - "https://github.com/datawire/apro"
          - << pipeline.project.git_url >>
        steps:
        - run:
            working_directory: ~/project
            command: rmdir ~/project/ambassador
        - checkout:
            path: ~/project
  dirty-check:
    steps:
    - run:
        name: "Dirty check"
        command: |
          # On Windows, `git status` doesn't record no-op
          # line-ending changes in to the index, so things show as
          # dirty even if they aren't.  Trying to `add` them does
          # trigger the appropriate index update.  So do a `git add`
          # *before* the `git status --porcelain` to work around
          # Windows being terrible; we'd otherwise put the `git add`
          # inside of the `if` block to help generate better output
          # for `git diff`.
          git add .
          if [[ -n "$(git status --porcelain)" ]]; then
             PAGER= git diff --cached
             exit 1
          fi
  skip-if-no-changes:
    parameters:
      to:
        description: The folder to look for changes, a grep regex
        type: string
    steps:
    - run:
        name: "Diff changes"
        command: |
          COMMIT_RANGE="<< pipeline.git.base_revision >>...<<pipeline.git.revision>>"
          echo "Commit range: " $COMMIT_RANGE
          git --no-pager diff $COMMIT_RANGE --name-only

          if [[ $(git --no-pager diff $COMMIT_RANGE --name-only | grep -E "<< parameters.to >>") == "" ]]; then
            echo "Exiting this CircleCI step because code in the following paths have not changed:"
            echo "<< parameters.to >>"
            circleci step halt
          fi
  skip-if-only-changes:
    parameters:
      to:
        description: The folder to look for changes, a grep regex
        type: string
    steps:
    - run:
        name: "Diff changes"
        command: |
          COMMIT_RANGE="<< pipeline.git.base_revision >>...<<pipeline.git.revision>>"
          echo "Commit range: " $COMMIT_RANGE
          git --no-pager diff $COMMIT_RANGE --name-only

          if [[ $(git --no-pager diff $COMMIT_RANGE --name-only | grep -v -E "<< parameters.to >>") == "" ]]; then
            echo "Exiting this CircleCI step because only code in the following paths has changed:"
            echo "<< parameters.to >>"
            circleci step halt
          fi
jobs:
  "website-preview-build":
    !!merge <<: *website-job
    steps:
    - website-setup
    - run: ./.ci/website-preview-build
    - persist_to_workspace:
        root: /tmp/getambassador.io
        paths:
        - public
  "website-preview-publish":
    !!merge <<: *website-job
    steps:
    - website-setup
    - attach_workspace:
        at: /tmp/getambassador.io
    - run: ./.ci/website-preview-publish
  "website-preview-blc":
    !!merge <<: *website-job
    steps:
    - website-setup
    - attach_workspace:
        at: /tmp/getambassador.io
    - run: ./.ci/website-preview-blc
    - store_artifacts:
        path: /tmp/blc.txt
        destination: blc.txt
  "website-preview-for-smoketest":
    !!merge <<: *website-job
    steps:
    - website-setup
    - run: ./.ci/website-preview-build
    - run: ./.ci/website-preview-publish
  "website-prod-publish":
    !!merge <<: *website-job
    steps:
    - website-setup
    - run:
        name: "Configure Git user"
        command: |
          git config --global user.name 'ambassador.git CircleCI user'
          git config --global user.email dev@datawire.io
    - run: ./.ci/website-prod-publish
  oss-dev-images:
    steps:
    - oss-linux-setup
    - skip-if-only-changes:
        to: docs/
    - oss-images-build-and-test
    machine:
      image: "ubuntu-1604:201903-01"
    working_directory: ~/project/ambassador
  oss-release-images:
    steps:
    - oss-linux-setup
    - oss-images-build-and-test
    - run:
        name: "Release"
        command: |
          docker login -u="${DOCKER_RELEASE_USERNAME}" -p="${DOCKER_RELEASE_PASSWORD}" "${RELEASE_REGISTRY%%/*}"
          DEV_KUBECONFIG="-skip-for-release-" make release/bits
    machine:
      image: "ubuntu-1604:201903-01"
    working_directory: ~/project/ambassador
  oss-release-promote:
    steps:
    - oss-linux-setup
    - run:
        name: "Promote to GA"
        command: |
          docker login -u="${DOCKER_RELEASE_USERNAME}" -p="${DOCKER_RELEASE_PASSWORD}" "${RELEASE_REGISTRY%%/*}"
          DEV_KUBECONFIG="-skip-for-release-" make release/promote-oss/to-ga
    machine:
      image: "ubuntu-1604:201903-01"
    working_directory: ~/project/ambassador
workflows:
  # All of these filters assume that "Only build pull requests" is turned on at
  # https://app.circleci.com/settings/project/github/datawire/apro/advanced
  # and that any non-'master' branches that we wish to run on are set up to be
  # triggered by GitHub actions (see ".github/workflows/circleci-branches.yml").
  "Docs: Dev":
    jobs:
    - "website-preview-build":
        filters:
          branches:
            ignore:
            # Don't bother running on forked PRs (which CircleCI
            # shows as branch="pull/${number}"); they won't have
            # GH_TOKEN set to be able to pull getambassador.io.git
            - /^pull\/[0-9]+$/
    - "website-preview-publish":
        requires: ["website-preview-build"]
        filters:
          branches:
            ignore:
            # Don't bother running on 'master' or the other
            # branches that we do the "Release" workflow for.
            - master
            - /^release\/v1\.[0-9]+$/
            # Don't bother running on forked PRs (which CircleCI
            # shows as branch="pull/${number}"); they won't have
            # GH_TOKEN set to be able to pull getambassador.io.git
            - /^pull\/[0-9]+$/
    - "website-preview-blc":
        requires: ["website-preview-build"]
        filters:
          branches:
            ignore:
            # Don't bother running on 'master' as broken links
            # should be caught in PRs or at release.
            - master
            # Don't bother running on forked PRs (which CircleCI
            # shows as branch="pull/${number}"); they won't have
            # GH_TOKEN set to be able to pull getambassador.io.git
            - /^pull\/[0-9]+$/
  "Docs: Prerelease":
    # Run preview-build+preview-publish on prerelease tags so that we
    # have a preview for the smoke-testers to use.  Do this in a
    # separate job from the "Dev" workflow so that people looking at
    # the PR vs the tag don't get different preview URLs.
    when:
      equal: ["https://github.com/datawire/apro", << pipeline.project.git_url >>]
    jobs:
    - "website-preview-for-smoketest":
        filters:
          tags:
            only: /^v[0-9]+\.[0-9]+\.[0-9]+-.*/
          branches:
            ignore: /.*/
  "Docs: Release":
    when:
      equal: ["https://github.com/datawire/ambassador", << pipeline.project.git_url
          >>]
    jobs:
    - "website-prod-publish":
        filters:
          branches:
            only:
            - master
            - /^release\/v1\.[0-9]+$/
  'OSS: Dev':
    jobs:
    - "oss-dev-images"
  'OSS: Release':
    when:
      equal:
      - "https://github.com/datawire/ambassador"
      - << pipeline.project.git_url >>
    jobs:
    - oss-release-images:
        filters:
          tags:
            only: /^v[0-9]+\.[0-9]+\.[0-9]+-.*/
          branches:
            ignore: /.*/
    - oss-release-promote:
        filters:
          tags:
            only: /^v[0-9]+\.[0-9]+\.[0-9]+$/
          branches:
            ignore: /.*/
